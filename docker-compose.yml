version: "3.9"

services:
  proxy:
    image: caddy:2-alpine
    container_name: bbot_caddy
    restart: unless-stopped
    depends_on:
      - osint
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - .env
    volumes:
      - ./reverse-proxy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - public
      - internal

  neo4j:
    image: neo4j:5.22
    container_name: bbot_neo4j
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=1G
      - NEO4J_dbms_allow__upgrade=true
      - NEO4J_PLUGINS=["apoc"]
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - internal
    dns:
      - 1.1.1.1
      - 8.8.8.8
    healthcheck:
      test: ["CMD-SHELL", "echo 'RETURN 1' | cypher-shell -u neo4j -p \"$NEO4J_PASSWORD\" > /dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 60

  osint:
    build:
      context: ./services/osint
      dockerfile: Dockerfile
    container_name: bbot_osint
    depends_on:
      neo4j:
        condition: service_healthy
    restart: unless-stopped
    user: "0:0"
    env_file:
      - .env
    volumes:
      # BBOT config will be generated from init_config.json at startup
      # Mount init_config.json from project root
      - ./init_config.json:/app/init_config.json:ro
      # Mount logs directory for BBOT and app logs
      - ./logs:/home/appuser/.bbot/logs
      - ./logs:/app/logs
      # Mount cache directory to ensure write access
      - ./cache:/home/appuser/.bbot/cache
      # Mount scans directory to ensure write access (avoid tmpfs perms)
      - ./scans:/home/appuser/.bbot/scans
    command: ["uvicorn app.main:app --host 0.0.0.0 --port 8000"]
    networks:
      - internal
      - public
    dns:
      - 1.1.1.1
      - 8.8.8.8
    dns_search: []
    dns_opt:
      - use-vc
      - attempts:2
      - timeout:2
    tmpfs:
      - /tmp
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8000/healthz"]
      interval: 30s
      timeout: 5s
      retries: 3
    secrets:
      - api_token
      - neo4j_password

volumes:
  neo4j_data:
  neo4j_logs:
  caddy_data:
  caddy_config:

networks:
  public:
    driver: bridge
  internal:
    driver: bridge
    internal: true

secrets:
  api_token:
    file: ./secrets/api_token
  neo4j_password:
    file: ./secrets/neo4j_password


